package WordCount;

import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class WordCount {

    public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    //GenericOptionsParser is used to handle generic hadoop command line options
    GenericOptionsParser optionParser = new GenericOptionsParser(conf, args);
    //here remainingArgs contains '-skip <pattern.txt>'
    String[] remainingArgs = optionParser.getRemainingArgs();
    if ((remainingArgs.length != 2) && (remainingArgs.length != 4)) {
		  System.err.println("Usage: wordcount <in> <out> [-skip skipPatternFile]");
		  System.exit(2);
    }
    Job job = Job.getInstance(conf, " word count ");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(WordCountMapper.class);
    job.setReducerClass(WordCountReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    List<String> otherArgs = new ArrayList<String>();
    for (int i=0; i < remainingArgs.length; ++i) {
        //passed -skip <pattern.txt> in the execution statement.
	    if ("-skip".equals(remainingArgs[i])) {
            job.addCacheFile(new Path(remainingArgs[++i]).toUri());
            job.getConfiguration().setBoolean("wordcount.skip.patterns", true);
	    } else {
            otherArgs.add(remainingArgs[i]);
	    }
    }
    FileInputFormat.addInputPath(job, new Path(args [0]));
    FileOutputFormat.setOutputPath(job, new Path(args [1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}


package WordCount;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.util.StringUtils;

public class WordCountMapper
        extends Mapper<Object, Text, Text, IntWritable>{

    //enum CountersEnum { WORDS_WITH_Z, INPUT_WORDS }

    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text("Word count");
    private boolean caseSensitive;
    private Set<String> patternsToSkip = new HashSet<String>();
    private Configuration conf;
    private BufferedReader fis;

    /*
     The setup function is run just before the map() function
     to perform some pre-steps. Here it is calling the 
     parseSkipFile().
    */
    @Override
    public void setup(Context context) throws IOException,
            InterruptedException {
        conf = context.getConfiguration();
        caseSensitive = conf.getBoolean("wordcount.case.sensitive", false);
        if (conf.getBoolean("wordcount.skip.patterns", false)) {
            URI[] patternsURIs = Job.getInstance(conf).getCacheFiles();
            for (URI patternsURI : patternsURIs) {
                Path patternsPath = new Path(patternsURI.getPath());
                String patternsFileName = patternsPath.getName().toString();
                parseSkipFile(patternsFileName);
            }
        }
    }

    /*
     parseSkipFile() functions is responsible for reading
     the pattern.txt file which contains the characters 
     to be removed from the file and add it to patternsToSkip
     hashset.
     Using the DistributedCache feature to plug-in the pattern
     file which contains characters to be ignored.
    */
    private void parseSkipFile(String fileName) {
        try {
            fis = new BufferedReader(new FileReader(fileName));
            String pattern = null;
            while ((pattern = fis.readLine()) != null) {
                patternsToSkip.add(pattern);
            }
        } catch (IOException ioe) {
            System.err.println("Caught exception while parsing the cached file '"
                + StringUtils.stringifyException(ioe));
        }
    }
    
    @Override
    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
        String line = (caseSensitive) ?
            value.toString() : value.toString().toLowerCase();
        for (String pattern : patternsToSkip) {
            line = line.replaceAll(pattern, "");
        }
        System.out.println("value of line : " + line);
        StringTokenizer itr = new StringTokenizer(line);
        while (itr.hasMoreTokens()) {
            word.set(itr.nextToken());
            context.write(word, one);
        }
    }
}


/*
 The reducer functions via reduce method sums
 up the values which are the occurrences count
 for each key.
*/
package WordCount;

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class WordCountReducer
    extends Reducer<Text,IntWritable,Text,IntWritable> {
    
    enum CountersEnum { WORDS, WORDS_WITH_Z, WORDS_LESS_THAN_4 }
    private IntWritable result = new IntWritable();
    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
        
        int sum = 0;
        for (IntWritable val : values) {
            sum += val.get();
        }
        result.set(sum);
        //counts the number of unique words in the corpus
        context.getCounter(CountersEnum.WORDS).increment(1);
        
	    if (key.toString().startsWith("z")){
            //count the number of unique words starting with z/Z
            context.getCounter(CountersEnum.WORDS_WITH_Z).increment(1);
      }
      if (sum < 4) {
            //count the number of words occuring less than 4 times
            context.getCounter(CountersEnum.WORDS_LESS_THAN_4).increment(1);
       }
       context.write(key, result);
    
  }
}


